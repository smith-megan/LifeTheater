/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PackagesRouteImport } from './routes/Packages'
import { Route as IndexRouteImport } from './routes/Index'
import { Route as ContactRouteImport } from './routes/Contact'
import { Route as BrochureRouteImport } from './routes/Brochure'

const PackagesRoute = PackagesRouteImport.update({
  id: '/Packages',
  path: '/Packages',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/Index',
  path: '/Index',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/Contact',
  path: '/Contact',
  getParentRoute: () => rootRouteImport,
} as any)
const BrochureRoute = BrochureRouteImport.update({
  id: '/Brochure',
  path: '/Brochure',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/Brochure': typeof BrochureRoute
  '/Contact': typeof ContactRoute
  '/Index': typeof IndexRoute
  '/Packages': typeof PackagesRoute
}
export interface FileRoutesByTo {
  '/Brochure': typeof BrochureRoute
  '/Contact': typeof ContactRoute
  '/Index': typeof IndexRoute
  '/Packages': typeof PackagesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/Brochure': typeof BrochureRoute
  '/Contact': typeof ContactRoute
  '/Index': typeof IndexRoute
  '/Packages': typeof PackagesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/Brochure' | '/Contact' | '/Index' | '/Packages'
  fileRoutesByTo: FileRoutesByTo
  to: '/Brochure' | '/Contact' | '/Index' | '/Packages'
  id: '__root__' | '/Brochure' | '/Contact' | '/Index' | '/Packages'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  BrochureRoute: typeof BrochureRoute
  ContactRoute: typeof ContactRoute
  IndexRoute: typeof IndexRoute
  PackagesRoute: typeof PackagesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Packages': {
      id: '/Packages'
      path: '/Packages'
      fullPath: '/Packages'
      preLoaderRoute: typeof PackagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Index': {
      id: '/Index'
      path: '/Index'
      fullPath: '/Index'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Contact': {
      id: '/Contact'
      path: '/Contact'
      fullPath: '/Contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Brochure': {
      id: '/Brochure'
      path: '/Brochure'
      fullPath: '/Brochure'
      preLoaderRoute: typeof BrochureRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  BrochureRoute: BrochureRoute,
  ContactRoute: ContactRoute,
  IndexRoute: IndexRoute,
  PackagesRoute: PackagesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
